//libaries and definitions
// Oximeter: https://github.com/sparkfun/SparkFun_MAX3010x_Sensor_Library/tree/master/examples
#include "heartRate.h"
#include "spo2_algorithm.h"
//haptic motor: https://github.com/adafruit/Adafruit_DRV2605_Library
#include "Adafruit_DRV2605.h"
#include <Stepper.h>
#define STEPS 2038 // the number of steps in one revolution of your motor (28BYJ-48)
#include "MAX30105.h" // Include MAX30105 sensor library
#include "spo2_algorithm.h" // Include SpO2 calculation algorithm
 
MAX30105 particleSensor; // Create an instance of the MAX30105 class
Stepper stepper(STEPS, 8, 10, 9, 11);

// Adjust buffer size based on the microcontroller's memory capacity
#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__)
uint16_t irBuffer[100]; // Buffer for IR data (16-bit for memory-limited devices)
uint16_t redBuffer[100]; // Buffer for red LED data
#else
uint32_t irBuffer[100]; // Buffer for IR data (32-bit for devices with more memory)
uint32_t redBuffer[100]; // Buffer for red LED data
#endif
 
int32_t bufferLength = 100; // Length of data buffer
int32_t spo2; // Variable to store calculated SpO2 value
int8_t validSPO2; // Flag indicating if SpO2 calculation is valid
int32_t heartRate; // Variable to store calculated heart rate
int8_t validHeartRate; // Flag indicating if heart rate calculation is valid
 
byte pulseLED = 11; // LED pin for pulse indication (must support PWM)
byte readLED = 13; // LED pin to indicate data read operation
 
//pins # inputs & # outputs
//inputs
const int buttonPin1 = 28;
const int buttonPin2 = 29;
const int accelerometer = 3;
const int oximeter = 4;
//outputs
const int LEDs = 5;
const int blue = 36;
const int green = 37;
const int yellow = 38;
const int red = 39;
const int haptic = 6;
const int speaker = 7;

//variables
//swtich between modes button
int buttonState1 = 0;
int lastButtonState1 = 0;
int mode = 0;
volatile bool motorActivated = false;

//userCheck button
int buttonState2 = 0;
int lastButtonState2 = 0;

//initialize functions

void setup() {
  // put your setup code here, to run once:
  //inputs
  pinMode(buttonPin1, INPUT);
  pinMode(buttonPin2, INPUT);
  pinMode(accelerometer, INPUT);
  pinMode(oximeter, INPUT);
  //outputs
  pinMode(LEDs, OUTPUT);
  pinMode(blue, OUTPUT);
  pinMode(green, OUTPUT);
  pinMode(yellow, OUTPUT);
  pinMode(red, OUTPUT);
  pinMode(haptic, OUTPUT);
  pinMode(speaker, OUTPUT);
  
  Serial.begin(115200);
  pinMode(pulseLED, OUTPUT); // Set pulseLED as output
  pinMode(readLED, OUTPUT); // Set readLED as output
}

void loop() {
  buttonState1 = digitalRead(buttonPin1);
  if(buttonState1 != lastButtonState1){
    if(buttonState1 == HIGH){
      mode = (mode + 1) % 4;
    }
    lastButtonState1 = buttonState1; // Moved outside of the if condition
    delay(50); //debounce delay
  }
  runMode(mode);
}


//modes
void runMode(int mode) {
  switch(mode){
    case 0:
      //standby mode
      standby();
      Serial.print("Standy Mode");
      Serial.print('\n');
      digitalWrite(blue, HIGH);
      digitalWrite(green, LOW);
      digitalWrite(yellow, LOW);
      digitalWrite(red, LOW);
      break;
    case 1:
      //vital read mode
      readVitals();
      Serial.print("Reading Vitals");
      Serial.print('\n');
      digitalWrite(blue, LOW);
      digitalWrite(green, HIGH);
      digitalWrite(yellow, LOW);
      digitalWrite(red, LOW);
      break;
    case 2:
      //test mode
      //emergency mode
      checkUser();
      Serial.print("Check on user");
      Serial.print('\n');
      digitalWrite(blue, LOW);
      digitalWrite(green, LOW);
      digitalWrite(yellow, HIGH);
      digitalWrite(red, LOW);
      break;
    case 3:
      
      Serial.print("HELP");
      Serial.print('\n');
      digitalWrite(blue, LOW);
      digitalWrite(green, LOW);
      digitalWrite(yellow, LOW);
      digitalWrite(red, HIGH);
      //emergency mode
      emergencyResponse();
      break;
  }
}
//Standby
void standby() {
  //turn off motor()
  motorInput(false);
  //turn off LEDs
  LEDInput(false);
  //turn off haptic
  hapticInput(false);
  //turn off speaker
  speakerInput(false);
  return;
}

//Vital reading mode
void readVitals() {
  // Initialize MAX30105 sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) {
    Serial.println(F("MAX30105 not found. Check wiring/power."));
    while (1); // Halt execution if sensor not found
  }
 
  Serial.println(F("Attach sensor to finger. Press key to start."));
  while (Serial.available() == 0); // Wait for user input to proceed
  Serial.read(); // Clear the serial buffer
 
  // Sensor configuration settings
  byte ledBrightness = 60; // LED brightness (0-255)
  byte sampleAverage = 4; // Averaging (1, 2, 4, 8, 16, 32)
  byte ledMode = 2; // LED mode (1=Red, 2=Red+IR, 3=Red+IR+Green)
  byte sampleRate = 100; // Sampling rate (50, 100, 200, 400, 800, 1000, 1600, 3200)
  int pulseWidth = 411; // Pulse width (69, 118, 215, 411)
  int adcRange = 4096; // ADC range (2048, 4096, 8192, 16384)
 
  // Apply configuration settings to the sensor
  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange);
   // Collect 100 samples and output raw red and IR data
  for (byte i = 0; i < bufferLength; i++) {
    while (!particleSensor.available()) particleSensor.check(); // Wait for new data
 
    redBuffer[i] = particleSensor.getRed(); // Store red LED data
    irBuffer[i] = particleSensor.getIR(); // Store IR data
    particleSensor.nextSample(); // Move to next sample
 
    Serial.print(F("red="));
    Serial.print(redBuffer[i], DEC);
    Serial.print(F(", ir="));
    Serial.println(irBuffer[i], DEC);
  }
 
  // Calculate heart rate and SpO2 from the first 100 samples
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 
  // Continuously update heart rate and SpO2 values with new samples
  while (1) {
    // Shift the last 75 samples to the beginning and fill the remaining with new data
    for (byte i = 25; i < 100; i++) {
      redBuffer[i - 25] = redBuffer[i];
      irBuffer[i - 25] = irBuffer[i];
    }
 
    // Collect new samples to refill the buffer
    for (byte i = 75; i < 100; i++) {
      while (!particleSensor.available()) particleSensor.check(); // Wait for new data
 
      digitalWrite(readLED, !digitalRead(readLED)); // Blink LED with each data read
 
      redBuffer[i] = particleSensor.getRed(); // Store new red data
      irBuffer[i] = particleSensor.getIR(); // Store new IR data
      particleSensor.nextSample(); // Move to next sample
 
      // Output raw data and calculated heart rate/SpO2 values
      Serial.print(F("red="));
      Serial.print(redBuffer[i], DEC);
      Serial.print(F(", ir="));
      Serial.print(irBuffer[i], DEC);
      Serial.print(F(", HR="));
      Serial.print(heartRate, DEC);
      Serial.print(F(", HRvalid="));
      Serial.print(validHeartRate, DEC);
      Serial.print(F(", SPO2="));
      Serial.print(spo2, DEC);
      Serial.print(F(", SPO2Valid="));
      Serial.println(validSPO2, DEC);
    }
 
    // Recalculate heart rate and SpO2 with the updated buffer
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
  }
}

//check on user

//Compare data
bool isDataCorrect(int avgBPM, int avgO) {
  //compare to certain values
}

void checkUser() {
  
}

void emergencyResponse() {
  
  //activate motor
  motorInput(true);
  
  
  //activate LEDs
  LEDInput(true);
  
  
  //activate haptic
  hapticInput(true);
  
  
  //activate speaker
  speakerInput(true);
  
  
  Serial.println("Emergency response completed"); // Debug statement
  return;
}

//motor to inflate bag
void motorInput(bool var) {
  if (var && !motorActivated) {
    stepper.setSpeed(11); // Set speed to 11 RPM
    stepper.step(900); // Move 900 steps
    Serial.println("Co2 Cartridge engaged bag should inflate."); // Testing statement
    motorActivated = true; // Set the flag to true to indicate the motor has been activated
  } else {
    stepper.step(0); // Stop the motor
    Serial.println("Motor mode is false. Motor movement stopped."); // Debug statement
  }
}

//accelerometer

//oximeter

//LCD Screen
void LCDDisplay() {
  
}

//getButton
int getButton() {
  //return int
}

//LEDs
void LEDInput(bool Mode) {
  if (Mode == true) {
    //LEDs on
  }
  else{
    //LEDs off
  }
}

//Speaker
void speakerInput(bool Mode) {
  if (Mode == true) {
    //speaker on
  }
  else{
    //speaker off
  }
}

//haptic motor
void hapticInput(bool Mode) {
  if (Mode == true) {
    //haptic on
  }
  else{
    //haptic off
  }
}
